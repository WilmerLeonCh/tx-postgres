// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocksService

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/tx-pgx/internal/domain"

	time "time"
)

// CarService is an autogenerated mock type for the CarService type
type CarService struct {
	mock.Mock
}

// GetNewCars provides a mock function with given fields: ctx, from
func (_m *CarService) GetNewCars(ctx context.Context, from time.Time) ([]domain.Car, error) {
	ret := _m.Called(ctx, from)

	var r0 []domain.Car
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) ([]domain.Car, error)); ok {
		return rf(ctx, from)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []domain.Car); ok {
		r0 = rf(ctx, from)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Car)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, from)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadCar provides a mock function with given fields: ctx, id
func (_m *CarService) ReadCar(ctx context.Context, id string) (*domain.Car, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Car
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Car, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Car); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Car)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveCar provides a mock function with given fields: ctx, car
func (_m *CarService) SaveCar(ctx context.Context, car *domain.Car) error {
	ret := _m.Called(ctx, car)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Car) error); ok {
		r0 = rf(ctx, car)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Sell provides a mock function with given fields: ctx, carId, owner, buyer, price
func (_m *CarService) Sell(ctx context.Context, carId string, owner string, buyer string, price int) error {
	ret := _m.Called(ctx, carId, owner, buyer, price)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int) error); ok {
		r0 = rf(ctx, carId, owner, buyer, price)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithinTransaction provides a mock function with given fields: _a0, _a1
func (_m *CarService) WithinTransaction(_a0 context.Context, _a1 func(context.Context) error) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCarService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCarService creates a new instance of CarService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCarService(t mockConstructorTestingTNewCarService) *CarService {
	mock := &CarService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
