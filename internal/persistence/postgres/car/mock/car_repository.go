// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocksRepository

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/tx-pgx/internal/persistence/model"

	time "time"
)

// CarRepository is an autogenerated mock type for the CarRepository type
type CarRepository struct {
	mock.Mock
}

// CreateCar provides a mock function with given fields: ctx, car
func (_m *CarRepository) CreateCar(ctx context.Context, car *model.Car) error {
	ret := _m.Called(ctx, car)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Car) error); ok {
		r0 = rf(ctx, car)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCarHistoryEvent provides a mock function with given fields: ctx, event
func (_m *CarRepository) CreateCarHistoryEvent(ctx context.Context, event *model.CarEvent) error {
	ret := _m.Called(ctx, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CarEvent) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCar provides a mock function with given fields: ctx, id
func (_m *CarRepository) DeleteCar(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCar provides a mock function with given fields: ctx, id
func (_m *CarRepository) GetCar(ctx context.Context, id string) (*model.Car, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Car
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Car, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Car); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Car)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCarsBatch provides a mock function with given fields: ctx, ids
func (_m *CarRepository) GetCarsBatch(ctx context.Context, ids []string) ([]model.Car, error) {
	ret := _m.Called(ctx, ids)

	var r0 []model.Car
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]model.Car, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []model.Car); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Car)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCarsByTimePeriod provides a mock function with given fields: ctx, from, to
func (_m *CarRepository) GetCarsByTimePeriod(ctx context.Context, from time.Time, to time.Time) ([]model.Car, error) {
	ret := _m.Called(ctx, from, to)

	var r0 []model.Car
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) ([]model.Car, error)); ok {
		return rf(ctx, from, to)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []model.Car); ok {
		r0 = rf(ctx, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Car)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCarsByVersion provides a mock function with given fields: ctx, _a1
func (_m *CarRepository) GetCarsByVersion(ctx context.Context, _a1 string) ([]model.Car, error) {
	ret := _m.Called(ctx, _a1)

	var r0 []model.Car
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.Car, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.Car); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Car)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCar provides a mock function with given fields: ctx, car
func (_m *CarRepository) UpdateCar(ctx context.Context, car *model.Car) error {
	ret := _m.Called(ctx, car)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Car) error); ok {
		r0 = rf(ctx, car)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCarHistoryEvent provides a mock function with given fields: ctx, event
func (_m *CarRepository) UpdateCarHistoryEvent(ctx context.Context, event *model.CarEvent) error {
	ret := _m.Called(ctx, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CarEvent) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithinTransaction provides a mock function with given fields: _a0, _a1
func (_m *CarRepository) WithinTransaction(_a0 context.Context, _a1 func(context.Context) error) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCarRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCarRepository creates a new instance of CarRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCarRepository(t mockConstructorTestingTNewCarRepository) *CarRepository {
	mock := &CarRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
